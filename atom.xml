<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CatOneTwo</title>
  
  <subtitle>CatOneTwo</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-12T04:29:00.342Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CatOneTwo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>YOLOv4 目标检测总结</title>
    <link href="http://yoursite.com/year-08-10-YOLOv4-skill.html"/>
    <id>http://yoursite.com/year-08-10-YOLOv4-skill.html</id>
    <published>2020-08-10T02:23:41.000Z</published>
    <updated>2020-08-12T04:29:00.342Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://arxiv.org/abs/2004.10934">YOLOv4</a> 是YOLOv3的一个优化，它的主要方法是组合不同检测技巧，从而选取出最优解。</p><p>这篇论文不但介绍了自己的方法，还总结了目标检测的框架和技巧，对我们有很大的启发意义。</p><a id="more"></a><h2 id="1-框架"><a href="#1-框架" class="headerlink" title="1. 框架"></a>1. 框架</h2><p>目标检测的通用模型通常包含两部分：CNN + 预测类别位置的部分。</p><ul><li>CNN 可称为模型的骨干网络（backbone），作用是提取图片特征，它会在 ImageNet  上预训练</li><li>预测部分即网络的输出部分称为头（ head），作用是预测图片中物体的类别（class）和边界框（bounding box）</li></ul><p>这两部分再加上输入的待检测的图片，就形成了 <strong>输入→网络→输出</strong> 的流程，作者形象地比喻为 <strong>input→backbone→heads</strong>。</p><p>近几年，有些学者在 backbone 和 head 之间插入一些 layer，主要用于收集不同阶段的特征图。这个选项可以看作流程中的 neck，所以模型的整个流程概括为 <strong>input→backbone→neck→heads</strong>，通用的模型是由这三 / 四部分组成的。</p><p>下面介绍 backbone 和 head 的分类。</p><p>根据 detector 在 GPU 平台还是 CPU 平台训练，backbone 可以分为：</p><p><img src="/year-08-10-YOLOv4-skill/backbone.png"></p><p>根据 detector 是否是 one-stage ，以及是否需要 anchor ，head 可以分为：</p><p> <img src="/year-08-10-YOLOv4-skill/head.png"></p><p>最后，附上作者总结的模型框架：</p><p> <img src="/year-08-10-YOLOv4-skill/archi.png"></p><h2 id="2-技巧"><a href="#2-技巧" class="headerlink" title="2. 技巧"></a>2. 技巧</h2><p>下面总结的这些技巧，论文大都给出了参考论文，如果对某种方法感兴趣，可以通过 YOLOv4 查找相应的论文。</p><h3 id="2-1-Bag-of-freebies"><a href="#2-1-Bag-of-freebies" class="headerlink" title="2.1 Bag of freebies"></a>2.1 Bag of freebies</h3><blockquote><p>We call these methods that only change the training strategy or only increase the training cost as “bag of freebies.”</p></blockquote><p>不改变模型，只改变训练策略或增加训练成本的那些方法</p><h4 id="Data-augmentation"><a href="#Data-augmentation" class="headerlink" title="Data augmentation"></a>Data augmentation</h4><p>数据增强：通过增加输入图片的多样性，从而增强模型的鲁棒性 robust</p><ul><li>pixel-wise adjustments 逐像素调整，保留调整后区域中的所有原始像素信息<ul><li>photometric distortions 改变图片的亮度、对比度、饱和度</li><li>geometric distortions 改变图像尺寸裁剪，翻转</li></ul></li><li>simulate object occlusion issues 在图像上模拟对象遮挡问题<ul><li>random erase, CutOut 随机选择图像中的矩形区域，并填充零的随机或互补值</li><li>hide-and-seek and grid mask 随机或均匀选择图像中的多个矩形区域并将其替换为全零</li></ul></li><li>apply to feature maps 在特征图上模拟遮挡<ul><li>DropOut, DropConnect, DropBlock</li></ul></li><li>use multiple images together 多幅图混合成一幅图<ul><li>MixUp 两幅图的乘积</li><li>CutMix 一幅图裁剪后覆盖到另一幅图，并根据混合区域调整标签</li></ul></li><li>style transfer GAN 通过 GAN 生成图片</li></ul><h4 id="Data-imbalance"><a href="#Data-imbalance" class="headerlink" title="Data imbalance"></a>Data imbalance</h4><p>数据不平衡：语义分布（semantic distribution）有偏差，不同类别之间的数据不平衡</p><ul><li>two-stage detector(sparse prediction)<ul><li>negative example mining, online hard example mining</li></ul></li><li>one-stage detector(dense prediction)<ul><li>focal loss (RetinaNet)</li></ul></li></ul><h4 id="Soft-label"><a href="#Soft-label" class="headerlink" title="Soft label"></a>Soft label</h4><p>如何表示标签：one-hot hard representation 很难表达不同类别之间的关系</p><blockquote><p>Hard Label = binary encoded e.g. [0, 0, 1, 0]</p><p>Soft Label = probability encoded e.g. [0.1, 0.3, 0.5, 0.2]</p><p>Soft labels have the potential to tell a model more about the meaning of each sample.</p></blockquote><ul><li><p>label smoothing 把 hard label 转换成 soft label，使模型更鲁棒</p></li><li><p>use the knowledge distillation to design the label refinement network 通过知识蒸馏获得更好的 soft label</p></li></ul><h4 id="Bounding-Box-BBox-regression"><a href="#Bounding-Box-BBox-regression" class="headerlink" title="Bounding Box (BBox) regression"></a>Bounding Box (BBox) regression</h4><p>边界框的回归函数：传统的目标函数使用均方差 Mean Square Error (MSE)，直接回归坐标没有考虑物体的完整性，因此可以添加 IOU 相关 loss</p><blockquote><p>BBox 的两种表示方法</p><p>{xcenter, ycenter, w, h}</p><p>{xtop left, ytop left, xbottom right, ybottom right}</p></blockquote><ul><li>IOU loss 因为 IoU 是尺度不变表示，所以可以解决传统方法计算 {x，y，w，h} 的 l1 或 l2 损失时，损失会随着尺度增加的问题。</li><li>GIoU loss 除覆盖区域外，还包括对象的形状和方向，目的是找到预测和真实框间的最小覆盖面积</li><li>DIoU loss 考虑物体中心间的距离</li><li>CIoU loss 同时考虑重叠区域，中心点之间的距离和纵横比，可以在 BBox 回归问题上实现更好的收敛速度和准确性</li></ul><hr><h3 id="2-2-Bag-of-specials"><a href="#2-2-Bag-of-specials" class="headerlink" title="2.2 Bag of specials"></a>2.2 Bag of specials</h3><blockquote><p>For those plugin modules and post-processing methods that only increase the inference cost by a small amount but can significantly improve the accuracy of object detection, we call them “bag of specials”.</p></blockquote><p>改变模型，添加网络层或添加后处理</p><h4 id="Enhance-receptive-field-module"><a href="#Enhance-receptive-field-module" class="headerlink" title="Enhance receptive field module"></a>Enhance receptive field module</h4><p>增强感受野模块</p><ul><li><p>SPP module : 来源于金字塔匹配 Spatial Pyramid Matching (SPM) ，把 SPM 插入 CNN 中，使用最大池化代替 BOW。YOLOv3 改进了 SPP 模块</p></li><li><p>ASPP module : ASPP 模块和改进的 SPP 模块之间的操作差异主要在于原始 k×k 内核大小，最大步幅等于1到几个 3×3 内核大小，膨胀比等于 k，以及 在膨胀卷积运算中，步幅等于 1</p></li><li><p>RFB module : RFB模块将使用k×k个核的多个膨胀卷积，膨胀比等于k，步幅等于1，以获得比ASPP更全面的空间覆盖范围</p></li></ul><h4 id="Attention-module"><a href="#Attention-module" class="headerlink" title="Attention module"></a>Attention module</h4><p>添加注意力模块</p><p>相关项目👉<a href="https://github.com/Separius/awesome-fast-attention">GitHub</a></p><ul><li><p>channel-wise attention 通道注意力机制 </p><ul><li>Squeeze-and-Excitation (SE module) 在 GPU 上运行耗时增加，更适合在移动设备中使用</li></ul></li><li><p>point-wise attention 空间注意力机制</p><ul><li>Spatial Attention Module (SAM) 不影响 GPU 运行的耗时</li></ul></li></ul><p><img src="/year-08-10-YOLOv4-skill/attention.png"></p><h4 id="Feature-integration"><a href="#Feature-integration" class="headerlink" title="Feature integration"></a>Feature integration</h4><p>特征整合，把彼此分开的特征（特征表征）正确联系起来，形成能够对某一物体的表征</p><ul><li><p>skip connection (FCN) , hyper-column 将低层物理特征集成到高层语义特征</p></li><li><p>SFAM 使用 SE 模块（上面提到的注意力模块）在多尺度级联特征图上执行通道级级别的加权</p></li><li><p>ASFF 使用 softmax 作为逐点级别加权，然后添加不同比例的特征图</p></li><li><p>BiFPN 提出了多输入加权残差连接的方法，以执行按比例缩放级别的加权，然后添加不同比例的特征图</p></li></ul><h4 id="Good-activation-function"><a href="#Good-activation-function" class="headerlink" title="Good activation function"></a>Good activation function</h4><p>好的激活函数</p><ul><li><p>ReLU 解决了传统 tanh 和 sigmoid 激活函数中经常遇到的梯度消失（gradient vanish）问题</p></li><li><p>LReLU, PReLU , ReLU6 , Scaled Exponential Linear Unit (SELU) , Swish , hard-Swish , and Mish</p></li></ul><h4 id="Post-processing"><a href="#Post-processing" class="headerlink" title="Post processing"></a>Post processing</h4><p>后处理常用的是 NMS 方法，用于过滤那些预测同一对象的不好 BBox，并仅保留具有较高响应度的候选 BBox。它还有下面这些优化方案：</p><ul><li><p>greedy NMS 把 classification confidence score 作为 R-CNN 的参考，根据由高到低的分数过滤</p></li><li><p>soft NMS 它考虑了一个问题，即物体的遮挡可能会导致置信度得分的下降</p></li><li><p>DIoU NMS 在软 soft NMS 的基础上将中心点距离的信息添加到 BBox 筛选过程中</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://arxiv.org/abs/2004.10934&quot;&gt;YOLOv4&lt;/a&gt; 是YOLOv3的一个优化，它的主要方法是组合不同检测技巧，从而选取出最优解。&lt;/p&gt;
&lt;p&gt;这篇论文不但介绍了自己的方法，还总结了目标检测的框架和技巧，对我们有很大的启发意义。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CV系列" scheme="http://yoursite.com/categories/CV%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="object detection" scheme="http://yoursite.com/tags/object-detection/"/>
    
  </entry>
  
  <entry>
    <title>Python 调试器 pdb</title>
    <link href="http://yoursite.com/year-08-08-pdb.html"/>
    <id>http://yoursite.com/year-08-08-pdb.html</id>
    <published>2020-08-08T03:31:31.000Z</published>
    <updated>2020-08-08T07:27:56.344Z</updated>
    
    <content type="html"><![CDATA[<p>如何调试 Python 程序？</p><p>使用 PyCharm 等 IDE ，我们可以使用它自带的调试工具，具体可以看《 <a href="https://catonetwo.github.io/year-08-08-pycharm.html">新手入门：PyCharm 的使用</a> 》的 5.4 节。</p><p>如果没有安装 IDE，或者不方便使用 IDE ，比如在服务器上运行程序，我们可能会写 <strong>print</strong> 语句输出变量，但 Python 自带的 Debug 工具比 print 更方便，它就是 <strong>pdb</strong>。</p><a id="more"></a><p>首先附上官方文档 👉 <a href="https://docs.python.org/3/library/pdb.html">pdb</a>，然后介绍几个常用方法。</p><h2 id="1-引用"><a href="#1-引用" class="headerlink" title="1. 引用"></a>1. 引用</h2><p>作为脚本在命令行调试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pdb myscript.py</span><br></pre></td></tr></table></figure><p>作为模块在 Python 文件引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line">pdb.set_trace() <span class="comment"># 写在需要打断点的地方</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pdb <span class="keyword">import</span> set_trace <span class="keyword">as</span> pause</span><br><span class="line">pause() <span class="comment"># 写在需要打断点的地方</span></span><br></pre></td></tr></table></figure><p>如下图所示，当命令行出现 (pdb)，说明已经正确打开了 pdb，接下来可以利用 pdb 进行调试了。</p><p>不过上面两种方法的区别是：</p><ul><li>命令行引入：在第一行命令进入调试模式</li><li>文件引入：在第一个断点处进入调试模式</li></ul><p>输入 <strong>h</strong>，可以查看相关命令，接下来介绍几个最常用的命令。</p><img src="/year-08-08-pdb/pdb1.png" class><h2 id="2-变量函数"><a href="#2-变量函数" class="headerlink" title="2. 变量函数"></a>2. 变量函数</h2><p>我们调试往往需要查看变量和函数值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p expression # 输出 expression 的值，print 的格式</span><br><span class="line">pp expression # 输出 expression 的值，pprint 的格式</span><br><span class="line">whatis expression # 输出 expression 的变量类型</span><br><span class="line"></span><br><span class="line">a 或 args # 输出当前函数的参数列表</span><br></pre></td></tr></table></figure><h2 id="3-断点设置"><a href="#3-断点设置" class="headerlink" title="3. 断点设置"></a>3. 断点设置</h2><p>除了在 python  文件中写断点语句，我们还可以设置断点和临时断点，临时断点执行一次后时自动删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加断点</span></span><br><span class="line">b</span><br><span class="line">b lineno # lineno 行号</span><br><span class="line">b filename:lineno # filename 文件名 xx.py</span><br><span class="line">b functionname # functionname 函数名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加临时断点</span></span><br><span class="line">tbreak</span><br><span class="line">tbreak lineno</span><br><span class="line">tbreak filename:lineno</span><br><span class="line">tbreak functionname</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除断点</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不带参数清除所有断点，会提示确认（包括临时断点）</span></span><br><span class="line">cl </span><br><span class="line"><span class="meta">#</span><span class="bash"> 不带参数清除所有断点，会提示确认（包括临时断点）</span></span><br><span class="line">cl filename:lineno </span><br><span class="line">cl bpnumber [bpnumber ...] # bpnumber 是断点序号，多个以空格分开</span><br></pre></td></tr></table></figure><h2 id="4-调试"><a href="#4-调试" class="headerlink" title="4. 调试"></a>4. 调试</h2><p>调试功能 PyCharm 也有，但要区分几个命令的区别：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s 或 step # 执行下一行，进入函数体</span><br><span class="line">n 或 next # 执行下一行，不进入函数体</span><br><span class="line"></span><br><span class="line">r 或 return # 执行代码直到从当前函数返回</span><br><span class="line">c 或 cont 或 continue # 执行代码直到下一断点</span><br><span class="line"></span><br><span class="line">unt(il) lineno # 一直执行到指定行号 lineno 的位置，或遇到断点</span><br><span class="line">j(ump) lineno # 直接执行指定行号 lineno 的语句，会跳过中间的语句</span><br></pre></td></tr></table></figure><p><strong>我常用的是 n 和 c</strong></p><h2 id="5-源代码"><a href="#5-源代码" class="headerlink" title="5. 源代码"></a>5. 源代码</h2><p>查看当前代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l 或 list # 查看当前行前后 11 行的源代码，当前行用箭头-&gt;指明</span><br><span class="line">ll # 查看整个源代码</span><br></pre></td></tr></table></figure><h2 id="6-退出调试"><a href="#6-退出调试" class="headerlink" title="6. 退出调试"></a>6. 退出调试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q 或 exit</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何调试 Python 程序？&lt;/p&gt;
&lt;p&gt;使用 PyCharm 等 IDE ，我们可以使用它自带的调试工具，具体可以看《 &lt;a href=&quot;https://catonetwo.github.io/year-08-08-pycharm.html&quot;&gt;新手入门：PyCharm 的使用&lt;/a&gt; 》的 5.4 节。&lt;/p&gt;
&lt;p&gt;如果没有安装 IDE，或者不方便使用 IDE ，比如在服务器上运行程序，我们可能会写 &lt;strong&gt;print&lt;/strong&gt; 语句输出变量，但 Python 自带的 Debug 工具比 print 更方便，它就是 &lt;strong&gt;pdb&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python 系列" scheme="http://yoursite.com/categories/Python-%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>新手入门：PyCharm 的使用</title>
    <link href="http://yoursite.com/year-08-08-pycharm.html"/>
    <id>http://yoursite.com/year-08-08-pycharm.html</id>
    <published>2020-08-08T01:59:16.000Z</published>
    <updated>2020-08-08T02:24:16.349Z</updated>
    
    <content type="html"><![CDATA[<p>PyCharm 是一种 Python IDE，带有一整套可以帮助用户在使用Python语言开发时提高其效率的工具，比如调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制。此外，专业版提供了一些高级功能，以用于支持Django框架下的专业Web开发。</p><p>演示版本： 专业版 2018.3</p><a id="more"></a><h2 id="一、界面"><a href="#一、界面" class="headerlink" title="一、界面"></a>一、界面</h2><p>PyCharm 界面如下，用到的主要是以下5个区域。</p><ol><li>菜单栏：新建，设置都在这里。</li><li>Run 和 Debug：用于运行，Run 直接启动，Debug 启动可以加断点调试。</li><li>项目的目录：项目相关的文件在这里找。</li><li>编辑区域：写代码的地方。</li><li>终端区：TODO 记录要做的事；Terminal 是程序输出的地方；Python Console 是控制台，可以直接运行 Python 语句，就像在 cmd 里输入 python 后的效果。<br><img src="https://img-blog.csdnimg.cn/20190306225418177.PNG#pic_center" alt="在这里插入图片描述"></li></ol><h2 id="二、新建"><a href="#二、新建" class="headerlink" title="二、新建"></a>二、新建</h2><p>包括新建项目和文件。</p><p>新建 Python 项目，在菜单栏：File-&gt;New Project 。</p><p>一般选 Pure Python(纯 Python 项目)，Django 和 Flask 都是 Web 应用框架。</p><p>第一个 Location 是这个项目所在的文件夹，最好新建一个文件夹专门存放，第二个 Location 是项目的文件名。</p><p>VirtualEnv 就是用来为一个应用创建一套“隔离”的Python运行环境，解决了不同应用间多版本的冲突问题。（比如有的项目需要 Python 2.x ，有的需要 Python 3.x）</p><p>Base Interpreter 是解释器，选择你要用的版本（Python 2.x 或 Python 3.x），方法是点击右边的 <strong>…</strong> ，打开 Select Python Interpreter ，找到本地 python.exe 的路径。</p><table>    <tr>     <td><center><img src="https://img-blog.csdnimg.cn/20190307230056718.PNG">     <td><center><img src="https://img-blog.csdnimg.cn/20190306233513513.png">    </center></td></center></td></tr></table><p>点击 Create 。</p><p>会有一个提示，新建的项目是打开一个新窗口，还是替换当前窗口的项目，还是和当前项目同时存放在当前窗口。为了方便演示，我选择 New Window。<br><img src="https://img-blog.csdnimg.cn/20190306232021974.png" alt="在这里插入图片描述"><br>新建好 Python 项目后，新建第一个 Python 文件。</p><p>可以在菜单栏，点击 File-&gt;New-&gt;Python File；或者在项目的目录区右键，点击 New-&gt;Python File。起个文件名。</p><p>当然也可以新建不同类型的文件。<br><img src="https://img-blog.csdnimg.cn/2019030723154541.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019030723135535.png#pic_center" alt="在这里插入图片描述"></p><h2 id="三、配置解释器"><a href="#三、配置解释器" class="headerlink" title="三、配置解释器"></a>三、配置解释器</h2><p>当我们编写 Python 代码时，我们得到的是一个包含 Python代码 的以 .py 为扩展名的文本文件。要运行代码，就需要 Python 解释器去执行 .py 文件。</p><p>当我们从 Python 官方网站下载并安装好 Python 2.x 或 Python 3.x 后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫 CPython 。在命令行下运行 python 就是启动 CPython 解释器。</p><p>CPython 是使用最广的 Python 解释器。安装好 Python 后，解释器的配置就是选择哪一个版本的 Python，只有一个版本的话，直接到 Python 安装路径下找 python.exe。</p><p>菜单栏：File-&gt;Settings，找 Project 下的 Project Interpreter，现在显示的是 No interpreter（没有解释器）。点击右侧的配置按钮，选择 Add，打开 Add Python Interpreter 界面。<br><img src="https://img-blog.csdnimg.cn/2019030723434276.PNG#pic_center" alt="在这里插入图片描述"><br>在当前环境下选择 python.exe（注意不是Python文件夹，而是 exe 文件，要记住 Python 的安装路径）。如果有两个版本的 Python ，就可以在这里切换，写代码时要注意两个版本语法的不同。<br><img src="https://img-blog.csdnimg.cn/20190307235132338.PNG#pic_center" alt="在这里插入图片描述"></p><h2 id="四、安装第三方模块"><a href="#四、安装第三方模块" class="headerlink" title="四、安装第三方模块"></a>四、安装第三方模块</h2><p>写 Python 程序会用到一些  Python 包（比如处理数据的NumPy，Pandas，机器学习使用到的 TensorFlow），你可以使用 pip 命令在 cmd 安装，也可以在 PyCharm 一键安装。</p><p>菜单栏：File-&gt;Settings-&gt; Project Interpreter。可以看到现在的解释器是 Python 3.7，下方有解释器自己的一些 package，若你的包在下面能找到，就不用安装了。</p><p>需要安装的话，点击右侧的 <strong>+</strong> ，即可进入安装页面。<br><img src="https://img-blog.csdnimg.cn/20190308091128315.PNG#pic_center" alt="在这里插入图片描述"><br>输入你要找的包，如果存在，它就会定位到包含你输入字符串的位置，选择你需要的包以及版本，在下方点击 Install  Package 即可。安装好，在上一个页面可以找到你刚刚安装的包。</p><p>安装失败，就再试几次，还不行就学会用 pip 安装，或到官网下载 Package。<br><img src="https://img-blog.csdnimg.cn/20190308091533912.PNG#pic_center" alt="在这里插入图片描述"></p><h2 id="五、第一个-Python-程序"><a href="#五、第一个-Python-程序" class="headerlink" title="五、第一个 Python 程序"></a>五、第一个 Python 程序</h2><p>据说程序员的第一行代码是 Hello World，那我们也从这里开始。</p><h3 id="1-编辑器中写程序"><a href="#1-编辑器中写程序" class="headerlink" title="1.编辑器中写程序"></a>1.编辑器中写程序</h3><p>在新建的 Hello.py 中写如下语句，在空白处右击选择 <strong>Run Hello</strong>（Hello 是文件名），下方就会有输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## python3 语法 结束不用分号，加上分号也能运行</span></span><br><span class="line">print(<span class="string">&#x27;Hello World&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190308093228452.png#pic_center" alt="在这里插入图片描述"></p><h3 id="2-交互模式下写程序"><a href="#2-交互模式下写程序" class="headerlink" title="2.交互模式下写程序"></a>2.交互模式下写程序</h3><p>Python 交互模式下写 Python 程序。</p><p>在 PyCharm 最底下有个 Python Console ，点击就打开了 Python 交互模式（提示符是 &gt;&gt;&gt;，有的版本可能不是）。在里面输入语句，点击回车，也有输出。<br><img src="https://img-blog.csdnimg.cn/20190308093712185.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-使用第三方模块"><a href="#3-使用第三方模块" class="headerlink" title="3.使用第三方模块"></a>3.使用第三方模块</h3><p>接下来演示如何使用导入的 Python 包，写下如下代码，并运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 导入包，一般为包起个别名，如np</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建一个 2*2 的矩阵，并输出</span></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">print(array)</span><br></pre></td></tr></table></figure><p>运行除了右击选择 Run ,还可以点击右上角的绿色三角形按钮。<br><img src="https://img-blog.csdnimg.cn/20190308094627788.png#pic_center" alt="在这里插入图片描述"><br>输出结果如下：<br><img src="https://img-blog.csdnimg.cn/20190308094730555.png#pic_center" alt="在这里插入图片描述"></p><h3 id="4-Run-和-Debug-模式"><a href="#4-Run-和-Debug-模式" class="headerlink" title="4.Run 和 Debug 模式"></a>4.Run 和 Debug 模式</h3><p>接下来讲 Run 模式 和 Debug 模式。</p><p>写好代码，点击 <strong>Run</strong> 就直接运行完。如果你想调试，就是想跟踪运行情况，或者程序出错需要找错在哪里，就可以右击选择 <strong>Debug Hello</strong>，或者在右上角点击小虫子的图标，就进入了 <strong>Debug</strong> 模式。</p><p>调试模式下，在你想跟踪的位置打断点，则程序会在断点处停下。打断点就是在某一行代码前行号后单击，出现红色的圆，删除断点就再点一下。<br><img src="https://img-blog.csdnimg.cn/2019030816493124.png#pic_center" alt="在这里插入图片描述"><br>可以用下面这个例子试一下 Debug。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 算数</span></span><br><span class="line">a = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line">b = <span class="number">9</span> - <span class="number">5</span></span><br><span class="line">c = <span class="number">2</span> * <span class="number">3</span></span><br><span class="line">d = <span class="number">10</span> / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;a = &#x27;</span>,a,<span class="string">&#x27;b = &#x27;</span>,b,<span class="string">&#x27;c = &#x27;</span>,c,<span class="string">&#x27;d = &#x27;</span>,d)</span><br></pre></td></tr></table></figure><p>调试时，打断点的行是红色，执行的那一行变成深蓝色。遇到断点后，程序停止运行，怎么往下走，用到左下角的一系列按钮。<br><img src="https://img-blog.csdnimg.cn/20190308171422352.png#pic_center" alt="在这里插入图片描述"><br>就是框柱的这些按钮，把鼠标箭头悬浮在按钮上可以看到按钮功能和快捷键。</p><p>左侧自上而下：</p><ol><li>Rerun（ctrl + F5）：重新调试，回到第一个断点所在的行。</li><li>Resume Program（F9）：跳到下一断点处。</li><li>Pause Program：暂停运行。</li><li>View Breakpoints：点击查看在哪儿打了断点，有很多文件的话，在这儿看清楚些，还可以取消打的断点。</li><li>Mute Breakpoints：你正在调试，点击这个按钮，所有断点变成灰色，就像不存在一样，程序直接运行完。当你打了很多断点，但中途想全部跳过直接结束看结果时可以使用。</li></ol><p>上面从左往右：</p><ol><li>show execution point（F10）：显示当前项目的所有断点。</li><li>Step Over（F8）:单步调试，走到下一行而不是下一个断点，遇到函数不进入，想跳过函数用这个。</li><li>Step Into（F7）:单步调试，走到下一行而不是下一个断点，遇到函数进入，当然函数内也是单步调试，想看函数内部的运行情况用这个。</li><li>Step Into My Code（Alt + Shift +F7）：执行下一行但忽略libraries（导入库的语句），不怎么用。</li><li>Force Step Into（Alt + Shift +F7）：执行下一行忽略lib和构造对象等，不怎么用。</li><li>Step Out（Shift+F8）：当目前执行在子函数a中时，选择该调试操作可以直接跳出子函数a，而不用继续执行子函数a中的剩余代码，并返回上一层函数。用了 Step Into 就可能需要用到 Step Out。</li><li>run to cursor（Alt +F9）： 直接跳到下一个断点，还没发现和 F9 的区别。<br><img src="https://img-blog.csdnimg.cn/20190308170834556.PNG#pic_center" alt="在这里插入图片描述"></li></ol><p>一般用不了这么多，我常用的是：从断点跳到断点 <strong>F9</strong> ；从断点跳到下一行 <strong>F8</strong>；调试期间不想走后面的断点了 <strong>Mute Breakpoints</strong> 。调试时，执行过的行后面会有一些提示，如变量的值。</p><h2 id="六、简单设置"><a href="#六、简单设置" class="headerlink" title="六、简单设置"></a>六、简单设置</h2><p>打开菜单栏的 <strong>File-&gt;Settings</strong> 。不知道某项配置在哪儿，可以直接在搜索框输入名字。</p><p>设置好记得点 Apply（应用）。</p><h3 id="1-背景颜色"><a href="#1-背景颜色" class="headerlink" title="1.背景颜色"></a>1.背景颜色</h3><p>Appearance &amp; Behavior-&gt;Appearance-&gt;theme。<br><img src="https://img-blog.csdnimg.cn/20190308180312147.png#pic_center" alt="在这里插入图片描述"></p><h3 id="2-文字"><a href="#2-文字" class="headerlink" title="2.文字"></a>2.文字</h3><p>Editor-&gt;font，能改字体代、大小、行间距。<img src="https://img-blog.csdnimg.cn/20190308180940498.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-编码格式"><a href="#3-编码格式" class="headerlink" title="3.编码格式"></a>3.编码格式</h3><p>搜索框输入 encoding，找到 Editor-&gt;File Encoding。因为可能使用中文，为防止乱码又找不到原因，把所有的选项设置成 <strong>UTF-8</strong>，设置完得重启一下软件才生效。<br><img src="https://img-blog.csdnimg.cn/2019030818212411.png#pic_center" alt="在这里插入图片描述"></p><h3 id="4-脚本头"><a href="#4-脚本头" class="headerlink" title="4.脚本头"></a>4.脚本头</h3><p>有时候，你会看到别人新建的文件开头有这样两句注释（解释器路径和编码），这其实是个模板。<br><img src="https://img-blog.csdnimg.cn/20190308182751590.png#pic_center" alt="在这里插入图片描述"><br>Editor-&gt;Flle and Code Templates，找到右边的 Python Scripts，输入下面的话，这样每次新建文件开头会自动加上注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190308183158213.png#pic_center" alt="在这里插入图片描述"></p><h2 id="七、技巧"><a href="#七、技巧" class="headerlink" title="七、技巧"></a>七、技巧</h2><h3 id="1-去掉波浪线"><a href="#1-去掉波浪线" class="headerlink" title="1.去掉波浪线"></a>1.去掉波浪线</h3><p>有时候会遇到字符串下有波浪线，比如输个名字的拼音就会有波浪线，这是因为 PyCharm 有个默认的单词拼写检测，这不算错。</p><p>如果不想看到这个波浪线，在字符串的位置，右键-&gt;spelling-&gt;Save xxx to project dictionary，加入检测的字典，波浪线就消失了。</p><table>    <tr>     <td><center><img src="https://img-blog.csdnimg.cn/20190308184011597.png">     <td><center><img src="https://img-blog.csdnimg.cn/2019030818411053.png">    </center></td></center></td></tr></table><p>还有时候定义一个函数会出现波浪线，把鼠标悬浮到波浪线上，提示需要空两行，那空两行之后，波浪线就消失了。</p><table>    <tr>     <td><center><img src="https://img-blog.csdnimg.cn/20190308184734787.png">     <td><center><img src="https://img-blog.csdnimg.cn/20190308184817885.png">    </center></td></center></td></tr></table><h3 id="2-待办事项"><a href="#2-待办事项" class="headerlink" title="2.待办事项"></a>2.待办事项</h3><p>有的时候代码不够完善，将来还想在一些地方修改，你可能想到加注释，但如何快速找到要修改的地方，一个强大的功能就是 <strong>TODO</strong>。</p><p>在要修改的地方加上这句话。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO 代办事项</span></span><br></pre></td></tr></table></figure><p>下次打开，在最下方点击 TODO，一下就找到代办事项。<br><img src="https://img-blog.csdnimg.cn/2019030818571732.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-快捷键"><a href="#3-快捷键" class="headerlink" title="3.快捷键"></a>3.快捷键</h3><p>复制一行：Ctrl + D<br>删除一行：Ctrl + Y</p><p>查找：Ctrl + F<br>替换：Ctrl +R<br>快速换行：Ctrl + Enter<br>批量注释 / 取消：ctrl + /</p><p>向后缩进：Tab<br>向前缩进：shift + Tab</p><p>折叠：Ctrl  + ‘-‘<br>展开：Ctrl + ‘+’<br>全部折叠：Ctrl  + shift  + ‘-‘<br>全部展开：Ctrl  + shift  + ‘+’</p><p>查看某个函数或模块：选中函数名 Ctrl + 单击</p><h3 id="4-查看-Python-文件的结构"><a href="#4-查看-Python-文件的结构" class="headerlink" title="4.查看 Python 文件的结构"></a>4.查看 Python 文件的结构</h3><p>点击左侧的 structure，可以看当前的文件中有哪些变量和函数，点击可直接跳转。<br><img src="https://img-blog.csdnimg.cn/20190308201025429.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>结束语：<br>1.这篇教程讲了一些常用的功能，看一次记不住，多用几次就熟悉了。<br>2.由于版本不同，有些功能的位置可能不一样，自己试试就知道了。<br>3.还有更多的功能等待去发掘。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PyCharm 是一种 Python IDE，带有一整套可以帮助用户在使用Python语言开发时提高其效率的工具，比如调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制。此外，专业版提供了一些高级功能，以用于支持Django框架下的专业Web开发。&lt;/p&gt;
&lt;p&gt;演示版本： 专业版 2018.3&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python 系列" scheme="http://yoursite.com/categories/Python-%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="PyCharm" scheme="http://yoursite.com/tags/PyCharm/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub Pages 搭建博客</title>
    <link href="http://yoursite.com/year-08-07-hexo-blog.html"/>
    <id>http://yoursite.com/year-08-07-hexo-blog.html</id>
    <published>2020-08-07T00:50:24.000Z</published>
    <updated>2020-08-08T02:14:58.850Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架，</p><p><a href="https://pages.github.com/">GitHub Pages</a> 是 GitHub 提供的一个网页寄存服务，可用于存放静态网页，包括博客、项目文档甚至整本书。</p><p>前提：</p><ul><li>注册 GitHub👉 <a href="https://blog.csdn.net/weixin_38673554/article/details/106039790">教程</a></li><li>本地安装 Git 👉<a href="https://blog.csdn.net/weixin_38673554/article/details/106097574">教程</a></li><li>本地安装 NodeJs 👉<a href="https://blog.csdn.net/weixin_38673554/article/details/106445112">教程</a></li></ul><a id="more"></a><h2 id="1-创建-GitHub-Pages"><a href="#1-创建-GitHub-Pages" class="headerlink" title="1. 创建 GitHub Pages"></a>1. 创建 GitHub Pages</h2><p>Create a new repository：</p><ul><li>Repository name：<code>&lt;username&gt;.github.io</code></li><li>Public</li></ul><p>创建完成，则博客地址为 <code>https://&lt;username&gt;.github.io</code>，如果 GitHub 账户名中有大写字母，地址会变成小写字母</p><h2 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2. 安装 Hexo"></a>2. 安装 Hexo</h2><p>为 Hexo 创建文件夹如 Blog，进入 Blog 文件夹，在地址栏输入 <code>cmd</code>，则打开的命令行直接为当前目录。</p><p>使用 npm 命令安装 Hexo，依次输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-cli</span> <span class="literal">-g</span></span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>完成后，打开浏览器输入地址：<code>localhost:4000</code></p><p>不报错的话，可以在浏览器看到你的 Hexo 网站。</p><h3 id="2-1-Hexo-常用命令"><a href="#2-1-Hexo-常用命令" class="headerlink" title="2.1 Hexo 常用命令"></a>2.1 Hexo 常用命令</h3><p>这里也对上面的几句命令进行解释：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-cli</span> <span class="literal">-g</span>  <span class="comment">#安装Hexo</span></span><br><span class="line">hexo init blog <span class="comment">#初始化博客，名称为 blog，也可以换成其他名字</span></span><br><span class="line">hexo g == hexo generate <span class="comment">#生成</span></span><br><span class="line">hexo s == hexo server <span class="comment">#启动服务预览</span></span><br><span class="line">hexo d == hexo deploy <span class="comment">#部署</span></span><br></pre></td></tr></table></figure><h3 id="2-2-Hexo-目录结构"><a href="#2-2-Hexo-目录结构" class="headerlink" title="2.2 Hexo 目录结构"></a>2.2 Hexo 目录结构</h3><p>进入刚刚建立的 blog 目录，你会看到以下几个主要文件：</p><img src="/year-08-07-hexo-blog/a.png" class width="1"><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml <span class="comment"># 网站的配置信息，可以在此配置大部分的参数</span></span><br><span class="line">├── package.json <span class="comment"># 应用程序的信息</span></span><br><span class="line">├── scaffolds <span class="comment"># 模版文件夹, 模板是指在新建的文章文件中默认填充的内容</span></span><br><span class="line">├── source <span class="comment"># 资源文件夹是存放用户资源的地方, Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去</span></span><br><span class="line">|   ├── _drafts <span class="comment"># 会被忽略，所以看不到</span></span><br><span class="line">|   └── _posts <span class="comment"># 你写的 Markdown 文件会放在这里</span></span><br><span class="line">└── themes <span class="comment"># 主题文件夹，Hexo 会根据主题来生成静态页面。</span></span><br></pre></td></tr></table></figure><p>我们最常用的几个文件是：</p><ul><li>_config.yml：为网站配置参数，比如下面的部署就是在这里</li><li>source/_posts：你写的文章都在这里</li><li>themes：为博客设置主题</li></ul><h2 id="3-将网站部署到-GitHub-Pages"><a href="#3-将网站部署到-GitHub-Pages" class="headerlink" title="3. 将网站部署到 GitHub Pages"></a>3. 将网站部署到 GitHub Pages</h2><p><strong>还是在 blog 目录下</strong>，用命令行安装插件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>然后打开 2.2 提到的 <code>_config.yml</code>（我是用 Notepad++ 打开的，你可以选择其他方式），找到 <code>deploy</code> 关键字（一般在最底下），把相关部分改成：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>比如我的是：</p><img src="/year-08-07-hexo-blog/b.png" class title="b"><p>接着，依次执行下面两个命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>查看 <code>https://&lt;username&gt;.github.io</code> 上的网页是否部署成功。</p><p>注意执行 <code>hexo d</code> 时有时会要求你输入 GitHub 账户和密码，按要求输入即可。</p><h2 id="4-更换主题"><a href="#4-更换主题" class="headerlink" title="4. 更换主题"></a>4. 更换主题</h2><p>现在你看到的博客是默认主题 <code>landscape</code>，Hexo 有丰富的 <a href="https://hexo.io/themes/">主题</a>，你可以更换自己喜欢的主题。</p><p>进入主题所在的 GitHub 项目，项目的 ReadMe 文件有配置主题的步骤，大部分都一样。</p><p>以比较出名的 next 主题为例👉<a href="https://github.com/next-theme/hexo-theme-next">GitHUb 地址</a></p><p>在你的 blog 目录右击 <code>Git Bash Here</code>，输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/next<span class="literal">-theme</span>/hexo<span class="literal">-theme</span><span class="literal">-next</span> themes/next</span><br></pre></td></tr></table></figure><p>然后 <code>themes</code> 目录下就会有 <code>next</code> 文件夹或其他主题名对应的文件夹。</p><p>打开 2.2 提到的 <code>_config.yml</code> ，找到关键字 <code>theme</code> （在文件下方），把冒号后面的 <code>landscape</code>（默认主题）改为 <code>next</code> 或你下载的主题名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>接着，重新生成部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>打开你的博客网址，就能看到新的主题啦~</p><p>到这一步，如果不出错，你已经完成了博客的部署，接下来，就可以开始你的写作之旅啦😊</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/&quot;&gt;Hexo&lt;/a&gt; 是一个快速、简洁且高效的博客框架，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; 是 GitHub 提供的一个网页寄存服务，可用于存放静态网页，包括博客、项目文档甚至整本书。&lt;/p&gt;
&lt;p&gt;前提：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册 GitHub👉 &lt;a href=&quot;https://blog.csdn.net/weixin_38673554/article/details/106039790&quot;&gt;教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本地安装 Git 👉&lt;a href=&quot;https://blog.csdn.net/weixin_38673554/article/details/106097574&quot;&gt;教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本地安装 NodeJs 👉&lt;a href=&quot;https://blog.csdn.net/weixin_38673554/article/details/106445112&quot;&gt;教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Hexo Blog 系列" scheme="http://yoursite.com/categories/Hexo-Blog-%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/year-08-06-hello-world.html"/>
    <id>http://yoursite.com/year-08-06-hello-world.html</id>
    <published>2020-08-06T13:36:32.383Z</published>
    <updated>2020-08-08T02:15:10.457Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo Blog 系列" scheme="http://yoursite.com/categories/Hexo-Blog-%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
